// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/product/repository.go

// Package mock_product is a generated GoMock package.
package mock_product

import (
	context "context"
	reflect "reflect"

	product "github.com/DirgaSulinanda/Checkout-Backend/internal/app/repository/product"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetProductDetails mocks base method.
func (m *MockRepository) GetProductDetails(ctx context.Context, sku []string) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductDetails", ctx, sku)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetails indicates an expected call of GetProductDetails.
func (mr *MockRepositoryMockRecorder) GetProductDetails(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetails", reflect.TypeOf((*MockRepository)(nil).GetProductDetails), ctx, sku)
}
